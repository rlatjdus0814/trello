[{"/Users/seoyeon/Project/todoList/src/index.js":"1","/Users/seoyeon/Project/todoList/src/App.js":"2","/Users/seoyeon/Project/todoList/src/components/Top.js":"3","/Users/seoyeon/Project/todoList/src/components/List.js":"4","/Users/seoyeon/Project/todoList/src/components/Cards.js":"5"},{"size":146,"mtime":1612335751390,"results":"6","hashOfConfig":"7"},{"size":5640,"mtime":1613701926913,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1613700644016,"results":"9","hashOfConfig":"7"},{"size":5318,"mtime":1613699845453,"results":"10","hashOfConfig":"7"},{"size":2945,"mtime":1613699829750,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"k3mxet",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"/Users/seoyeon/Project/todoList/src/index.js",[],["25","26"],"/Users/seoyeon/Project/todoList/src/App.js",[],"/Users/seoyeon/Project/todoList/src/components/Top.js",[],"/Users/seoyeon/Project/todoList/src/components/List.js",["27","28"],"import React from 'react';\nimport '../App.css';\nimport Cards from './Cards.js';\nimport cancel from '../img/cancel.png';\nimport cancelC from '../img/cancel-circle.png';\nclass List extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      cardId: 14,\n      addCardMode: false,\n      id: props.id,\n      lists: props.lists,\n      list: props.list,\n      card: props.card,\n      cardIds: props.cardIds,\n      title: props.title,\n      text: '',\n      style: {\n        border: 'none',\n      },\n      createT: {\n        display: 'none'\n      },\n      createF: {\n        display: 'block'\n      }\n    };\n  }\n\n  static getDerivedStateFromProps(props, state){\n    if(props.lists !== state.lists || props.cardIds !== state.cardIds){\n      return {\n        lists: props.lists,\n        \n      };\n    }\n    return null;\n  }\n\n  handleTitleInput = (e) => {\n    this.setState({\n      title: e.target.value\n    });\n  }\n\n  titleClick = () => {\n    this.setState({\n      style: {\n        border: 'none',\n        outline: 'none'\n      }\n    });\n  }\n\n  handleTitleEdit = (e) => {\n    if(!(this.title === '')){\n      if(e.key === 'Enter'){\n        this.setState({\n          title: e.target.value\n        });\n      } \n    }\n  }\n\n  setData = (content, index) => {\n    const temp = [].concat(this.state.content);\n    temp[index] = content;\n    this.setState({\n      content: temp\n    });\n  }\n\n  handleCardCreate = (e) => {\n    this.setState({\n      text: e.target.value\n    });\n  }\n\n  handleAddCard = (e) =>{\n    if(!(this.state.text === '')){\n      if(e.key === 'Enter'){\n        e.preventDefault();\n        // const newCardIds = [\n        //   ...this.state.cardIds.concat(`${this.state.cardId}`)\n        // ];\n        // console.log(newCardIds);\n\n        // this.setState({\n        //   list: {\n        //     ...this.state.list,\n        //     cardIds: newCardIds\n        //   },\n        //   cardIds: newCardIds,\n        //   card: this.state.card.concat({\n        //         id: this.state.cardId,\n        //         content: e.target.value,\n        //         }),\n        //   text: '',\n        // })\n        \n        const newCardIds = this.state.cardIds.concat(`${this.state.cardId}`);\n        // const newCardIds = [\n        //   ...this.state.cardIds, (`${this.state.cardId}`)\n        // ];\n        console.log('enter', newCardIds);\n        \n        this.setState({\n          list: Object.assign(this.state.list, {\n            cardIds: newCardIds\n          }),\n          cardIds: newCardIds,\n          card: this.state.card.concat({\n            id: this.state.cardId,\n            content: e.target.value,\n          }),\n          text: '',\n        });\n        this.onCardCnt();\n        this.createClick();\n      }\n    }\n  }\n\n  onCardCnt = () => {\n    this.setState({\n      cardId: this.state.cardId+1\n    })\n  }\n\n  RemoveData = (cardId) => {\n    this.setState({\n      list: {\n        ...this.state.list,\n        cardIds: this.state.cardIds.filter((dataitem, item, newData) => item !== cardId ),\n      },\n      cardIds: this.state.cardIds.filter((dataitem, item, newData) => item !== cardId ),\n      card: this.state.card.filter((dataitem, item, newData) => item !== cardId )\n    });\n  }\n\n  delList = () => {\n    this.props.onRemove(this.state.id);\n  }\n\n  createClick = () => {\n    (this.state.addCardMode) ? \n    this.setState({\n      createT: { display: 'none' },\n      createF: { display: 'block' },\n      addCardMode: false\n    }) : \n    this.setState({\n      createT: { display: 'block' },\n      createF: { display: 'none' },\n      addCardMode : true\n    });\n  }\n\n  cancelClick = () => {\n    this.setState({\n      addCardMode: false,\n      text: ''\n    });\n    this.createClick();\n  }\n\n  render() {\n    const {card, list, lists, title, cardIds, style, text, createT, createF} = this.state;\n  return(\n    <div className=\"list\">\n      <div className=\"content-wrap\">\n        <div className=\"content-wrap-card\">\n          <div className=\"card-top\">\n            <div className=\"card-top-title\"><input value={title} style={style} onClick={this.titleClick} onChange={this.handleTitleInput} onKeyPress={this.handleTitleEdit}></input></div>\n            <div className=\"card-delete-btn\" onClick={this.delList}><img src={cancel} alt=\"delete\" /></div>\n          </div>\n            <div className=\"cards\">\n              { card.map((card, i) => \n                <Cards key={card.id} id={card.id} index={i} card={card} lists={lists} content={card.content} setData={(card) => this.setData(card, i)} onRemove={() => this.RemoveData(i)} />\n              )}\n            </div>\n          <div className=\"card-compose-create\">\n            <form>\n              <div className=\"create-false\" style={createF} onClick={this.createClick} >\n                <span>Add Card</span>\n              </div>\n              <div className=\"create-true\" style={createT}>\n                <input className=\"create-input\" placeholder=\"Add another card\" value={text} onKeyPress={this.handleAddCard.bind(this)} onChange={this.handleCardCreate}></input>\n                <div className=\"create-cancelBtn\" onClick={this.cancelClick}>\n                  <img src={cancelC} alt=\"cancel\" />\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>  \n    );\n  }\n}\n\nexport default List;","/Users/seoyeon/Project/todoList/src/components/Cards.js",["29","30"],"import React from 'react';\nimport '../App.css';\nimport cancel from '../img/cancel.png';\nimport edit from '../img/draw.png';\n\nclass Cards extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      cnt: 1,\n      editMode: false,\n      id: props.id,\n      index: props.index,\n      card: props.card,\n      lists: props.lists,\n      content: props.content,\n      style:{\n        border: 'none',\n        height: '20px'\n      },\n      styleBG:{\n        background: '#ffffff'\n      },\n      color: ['#ffffff', '#fddfe3', '#fcfbed', ' #dff3eb', '#e5edf8', '#eee5f8']\n    };\n  };\n\n  static getDerivedStateFromProps(props, state){\n    if(props.card !== state.card || props.lists !== state.lists){\n      return {\n        card: props.card,\n        lists: props.lists\n      };\n    }\n    return null;\n  }\n  \n  handleCardInput = (e) => {\n    this.setState({\n      content: e.target.value\n    });\n    this.props.setData(e.target.value);\n  }\n\n  handleEdit = () => {\n    const {editMode} = this.state;\n    this.setState({\n      editMode: !editMode\n    });\n  }\n  \n  handleCardEdit = (e) => {\n    if(!(this.state.content === '')){\n      if(e.key === 'Enter'){\n        e.preventDefault();\n        this.setState({\n          content: e.target.value\n        });\n        this.handleEdit();\n      }\n    }\n  }\n\n  handleRemove = (e) => {\n    e.preventDefault();\n    this.props.onRemove(this.state.card.id);\n    this.setState({\n      styleBG: {\n        background: '#ffffff'\n      }\n    });\n  }\n\n  cardColorChange = () => {\n    const {color, cnt} = this.state;\n    if(this.state.editMode === false){\n      this.setState({\n        styleBG: {\n          background: color[cnt]\n        },\n        cnt: cnt + 1\n      });\n      if(cnt >= 5){\n        this.setState({\n          cnt: 0\n        })\n      }\n    }\n  }\n\n  render() {\n    const {content, styleBG, styleItem, card, editMode, index} = this.state;\n    return (\n        <div>\n          <div className=\"card-color\">\n          <div className=\"card-compose-card\" style={styleBG}>\n            <form>\n              <div className=\"card-card\">\n                <div className=\"card-item\" style={styleItem}  onClick={this.cardColorChange}>\n                  {editMode ? \n                    <input className=\"card-input\" value={content} name=\"cardInput\" onChange={this.handleCardInput} onKeyPress={this.handleCardEdit} ></input>\n                    : <p>{content}</p> \n                  }\n                </div>\n                <div className=\"card-btn\">\n                  <div className=\"edit-btn\" onClick={this.handleEdit}>\n                    <img src={edit} alt=\"edit\" />\n                  </div>\n                  <div className=\"cancel-btn\" onClick={this.handleRemove}>\n                    <img src={cancel} alt=\"cancel\" />\n                  </div>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n        </div>\n    ); \n  }\n}\n\nexport default Cards;",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":169,"column":18,"nodeType":"37","messageId":"38","endLine":169,"endColumn":22},{"ruleId":"35","severity":1,"message":"39","line":169,"column":38,"nodeType":"37","messageId":"38","endLine":169,"endColumn":45},{"ruleId":"35","severity":1,"message":"40","line":92,"column":41,"nodeType":"37","messageId":"38","endLine":92,"endColumn":45},{"ruleId":"35","severity":1,"message":"41","line":92,"column":57,"nodeType":"37","messageId":"38","endLine":92,"endColumn":62},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'list' is assigned a value but never used.","Identifier","unusedVar","'cardIds' is assigned a value but never used.","'card' is assigned a value but never used.","'index' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]